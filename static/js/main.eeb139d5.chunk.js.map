{"version":3,"sources":["components/Buttons/Buttons.jsx","components/Countdown/Countdown.jsx","App.js","reportWebVitals.js","index.js"],"names":["Buttons","onStartStop","onWait","onReset","className","onClick","onDoubleClick","Countdown","time","Math","floor","slice","App","useState","setTime","timerOn","setTimerOn","showInfo","setShowInfo","useEffect","countdown$","interval","subscribe","prevTime","unsubscribe","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAGaA,EAAU,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC7C,OACE,sBAAKC,UAAU,UAAf,UACE,wBACEC,QAASJ,EACTG,UAAU,sCAFZ,wBAMA,wBACEE,cAAeJ,EACfE,UAAU,sCAFZ,kBAMA,wBACEC,QAASF,EACTC,UAAU,sCAFZ,uBCfOG,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1B,OACE,sBAAKJ,UAAU,UAAf,UACE,gCACE,mBAAGA,UAAU,QAAb,UAAuB,IAAMK,KAAKC,MAAMF,EAAO,OAAOG,OAAO,KAC7D,sBAAMP,UAAU,MAAhB,sBAEF,mBAAGA,UAAU,QAAb,eACA,gCACE,mBAAGA,UAAU,QAAb,UAAuB,IAAMK,KAAKC,MAAMF,EAAO,IAAM,IAAIG,OAAO,KAChE,sBAAMP,UAAU,MAAhB,wBAEF,mBAAGA,UAAU,QAAb,eACA,gCACE,mBAAGA,UAAU,QAAb,UAAuB,IAAOI,EAAO,IAAKG,OAAO,KACjD,sBAAMP,UAAU,MAAhB,4BC0DOQ,MArEf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNL,EADM,KACAM,EADA,OAEiBD,oBAAS,GAF1B,mBAENE,EAFM,KAEGC,EAFH,OAGmBH,oBAAS,GAH5B,mBAGNI,EAHM,KAGIC,EAHJ,KAmCb,OA9BAC,qBAAU,WACR,IAAMC,EAAaC,YAAS,KACzBC,WAAU,YACO,IAAZP,GACFD,GAAQ,SAAAS,GAAQ,OAAIA,EAAW,QAIrC,OAAO,WACLH,EAAWI,iBAEZ,CAACT,IAoBF,qBAAKX,UAAU,MAAf,SACE,sBAAKA,UAAU,gBAAf,UACGa,GACC,wBAAQb,UAAU,SAASC,QAAS,WAClCa,GAAY,GACZO,QAAQC,IAAI,aAIdT,GACA,wBACEZ,QAhBG,WACXa,GAAY,IAgBJd,UAAU,iBAFZ,kBAQDa,GACG,sBAAKb,UAAU,MAAf,UACE,cAAC,EAAD,CAAWI,KAAMA,IACjB,cAAC,EAAD,CACEP,YAxCI,WAChBe,GAAYD,IAwCAb,OArCD,WACXc,GAAW,IAqCCb,QAlCA,WACZW,EAAQ,GACRE,GAAW,eCvBAW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.eeb139d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Buttons = ({ onStartStop, onWait, onReset }) => {\r\n  return (\r\n    <div className=\"buttons\">\r\n      <button\r\n        onClick={onStartStop}\r\n        className=\"button is-link is-outlined is-small\"\r\n      >\r\n        Start/Stop\r\n      </button>\r\n      <button\r\n        onDoubleClick={onWait}\r\n        className=\"button is-link is-outlined is-small\"\r\n      >\r\n        Wait\r\n      </button>\r\n      <button\r\n        onClick={onReset}\r\n        className=\"button is-link is-outlined is-small\"\r\n      >\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nButtons.propTypes = {\r\n  onStartStop: PropTypes.func.isRequired,\r\n  onWait: PropTypes.func.isRequired,\r\n  onReset: PropTypes.func.isRequired,\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Countdown = ({ time }) => {\r\n  return (\r\n    <div className=\"content\">\r\n      <div>\r\n        <p className=\"count\">{('0' + Math.floor(time / 3600)).slice(-2)}</p>\r\n        <span className=\"hor\">hours</span>\r\n      </div>\r\n      <p className=\"count\">:</p>\r\n      <div>\r\n        <p className=\"count\">{('0' + Math.floor(time / 60) % 60).slice(-2)}</p>\r\n        <span className=\"min\">minutes</span>\r\n      </div>\r\n      <p className=\"count\">:</p>\r\n      <div>\r\n        <p className=\"count\">{('0' + (time % 60)).slice(-2)}</p>\r\n        <span className=\"sec\">seconds</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountdown.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/reset.scss';\nimport { interval } from 'rxjs';\nimport { Buttons } from './components/Buttons/Buttons';\nimport { Countdown } from \"./components/Countdown/Countdown\";\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n  const [showInfo, setShowInfo] = useState(true);\n\n  useEffect(() => {\n    const countdown$ = interval(1000)\n      .subscribe(() => {\n        if (timerOn === true) {\n          setTime(prevTime => prevTime + 1)\n        }\n      });\n\n    return () => {\n      countdown$.unsubscribe();\n    };\n  }, [timerOn]);\n\n  const startStop = () => {\n    setTimerOn(!timerOn);\n  };\n\n  const wait = () => {\n    setTimerOn(false);\n  };\n\n  const reset = () => {\n    setTime(0);\n    setTimerOn(false);\n  };\n\n  const show = () => {\n    setShowInfo(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        {showInfo && (\n          <button className=\"delete\" onClick={() => {\n            setShowInfo(false);\n            console.log('close')\n          }}/>\n        )}\n\n        {!showInfo && (\n          <button\n            onClick={show}\n            className=\"button is-link\"\n          >\n            Show\n          </button>\n        )}\n\n        {showInfo && (\n            <div className=\"box\">\n              <Countdown time={time}/>\n              <Buttons\n                onStartStop={startStop}\n                onWait={wait}\n                onReset={reset}\n              />\n            </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bulma/css/bulma.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}